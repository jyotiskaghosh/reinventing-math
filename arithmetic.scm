(define (mod x y) (let ((m (modulo x y))) (if (= m 0) y m)))

(define (addition m)
	(define (add x y)
		(if (or (= x 0) (= y 0)) 
			(error "0 is an invalid")
			(/ (mod (+ (* (numerator x) (denominator y)) (* (numerator y) (denominator x))) m)
				(mod (* (denominator x) (denominator y)) m))))
	(if (<= m 0) 
		(error "Negative numbers and 0 are invalid modulo value")
		(lambda (x y . numbers) (fold-right add (add x y) numbers))))

(define (multiplication m)
	(define (mul x y)
		(if (or (= x 0) (= y 0)) 
			(error "0 is invalid")
			(/ (mod (* (numerator x) (numerator y)) m)
				(mod (* (denominator x) (denominator y)) m))))
	(if (<= m 0) 
		(error "Negative numbers and 0 are invalid modulo value")
		(lambda (x y . numbers) (fold-right mul (mul x y) numbers))))

